import datetime

from pymongo import MongoClient
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator

from util import execute_sql_with_airflow_postgres_connection_id

POSTGRES_CONN_ID = "data_eng"


def move_from_mongo_landing_to_postgres():
    client = MongoClient(
        "mongo",
        27017,
        username="admin",
        password="admin",
    )
    db = client.media_coverage_of_crime_database

    data = []

    for doc in db.cnn_mentions_collection.find():
        try:
            rate = doc["transcripts_with_mentions_of_crime"] / doc["total_transcripts"]
        except ZeroDivisionError:
            rate = 0

        data.append(
            (
                doc["date"],
                doc["transcripts_with_mentions_of_crime"],
                doc["total_transcripts"],
                rate,
            )
        )

    records_list_template = ",".join(["%s"] * len(data))
    insert_query = "INSERT INTO staging_crime_media_coverage (date, transcripts_with_mentions_of_crime, total_transcripts, crime_mention_rate) VALUES {}".format(
        records_list_template
    )

    execute_sql_with_airflow_postgres_connection_id(insert_query, data=data)


default_args_dict = {
    "start_date": datetime.datetime.now(datetime.timezone.utc),
    "concurrency": 1,
    "retries": 1,
    "retry_delay": datetime.timedelta(minutes=5),
}

dag = DAG(
    dag_id="wrangle_media_coverage_of_crime",
    default_args=default_args_dict,
    schedule="@weekly",
    catchup=False,
)

task_create_sql_table = PostgresOperator(
    task_id="task_create_sql_table",
    postgres_conn_id="data_eng",
    sql="CREATE TABLE IF NOT EXISTS staging_crime_media_coverage (id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, date DATE, transcripts_with_mentions_of_crime INTEGER, total_transcripts INTEGER, crime_mention_rate NUMERIC);",
    dag=dag,
)

task_move_to_postgres = PythonOperator(
    task_id="task_move_from_mongo_landing_to_postgres",
    python_callable=move_from_mongo_landing_to_postgres,
    dag=dag,
)

task_create_sql_table >> task_move_to_postgres
